name: Publish Docker image

on:
  release:
    types: [published]
  push:
    branches: ["*"]
  pull_request: {}

permissions:
  packages: write
  contents: write
  attestations: write
  id-token: write

jobs:
  build:
    name: Build ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
            tag_suffix: -amd64
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-24.04-arm
            tag_suffix: -arm64

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          lfs: 'true'
          submodules: 'recursive'

      - name: Log in to Docker Hub
        if: github.event_name == 'release'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: alloverse/alloplace3

      # Validation builds (push/PR): single-arch, no push
      - name: Build image (validation only, no push)
        if: github.event_name != 'release'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Release builds: push single-arch image with suffix
      - name: Build & push image (release)
        if: github.event_name == 'release'
        id: push_single
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          provenance: false
          sbom: false
          tags: alloverse/alloplace3:${{ github.event.release.tag_name }}${{ matrix.tag_suffix }}
          labels: ${{ steps.meta.outputs.labels }}

  publish_manifest:
    name: Create multi-arch tag(s), attest, & update notes
    needs: build
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Create multi-arch manifest (tag + latest)
        run: |
          IMAGE=alloverse/alloplace3:${{ github.event.release.tag_name }}
          docker buildx imagetools create \
            -t "${IMAGE}" \
            -t alloverse/alloplace3:latest \
            "${IMAGE}-amd64" \
            "${IMAGE}-arm64"

      - name: Inspect manifest (get digest)
        id: insp
        run: |
          IMAGE=alloverse/alloplace3:${{ github.event.release.tag_name }}
          docker buildx imagetools inspect --raw "$IMAGE" | sha256sum | awk '{print "sha256:"$1}' > digest.txt
          echo "digest=$(cat digest.txt)" >> $GITHUB_OUTPUT

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/alloverse/alloplace3
          subject-digest: ${{ steps.insp.outputs.digest }}
          push-to-registry: true

      - name: Update release notes with Docker instructions
        uses: actions/github-script@v7
        env:
          IMAGE_BASE: alloverse/alloplace3
          IMAGE_DIGEST: ${{ steps.insp.outputs.digest }}
        with:
          script: |
            const rel = context.payload.release;
            const tag = rel.tag_name;
            const image = `${process.env.IMAGE_BASE}:${tag}`;
            const snippet = [
              '---',
              '### Docker image',
              '',
              `**Image:** \`${image}\``,
              '',
              '```bash',
              `docker pull ${image}`,
              `docker pull ${process.env.IMAGE_BASE}:latest`,
              `docker run --rm -it -p 9080:9080 ${image}`,
              '```',
              '',
              'Architectures: `linux/amd64, linux/arm64`.',
              process.env.IMAGE_DIGEST ? `Manifest digest: \`${process.env.IMAGE_DIGEST}\`.` : '',
              ''
            ].join('\n');
            const body = (rel.body || '') + '\n\n' + snippet;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: rel.id,
              body
            });