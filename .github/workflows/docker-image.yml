name: Publish Docker image

on:
  release:
    types: [published]
  push: {}
  pull_request: {}

jobs:
  push_to_registry:
    name: Build (and push if publishing release)
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      attestations: write
      id-token: write

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        with:
          lfs: 'true'
          submodules: 'recursive'

      # Only log in when we actually intend to push (release event).
      - name: Log in to Docker Hub
        if: github.event_name == 'release'
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Multi-arch setup only needed for release builds.
      - name: Set up QEMU (release only)
        if: github.event_name == 'release'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx (release only)
        if: github.event_name == 'release'
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: alloverse/alloplace3

      # Validation build for pushes/PRs: single-arch, no push.
      - name: Build Docker image (validation, no push)
        if: github.event_name != 'release'
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          push: false
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Release build: multi-platform and pushed.
      - name: Build & push Docker image (multi-platform, release)
        if: github.event_name == 'release'
        id: push
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Attestation only makes sense when an image was pushed.
      - name: Generate artifact attestation
        if: github.event_name == 'release'
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: index.docker.io/alloverse/alloplace3
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      # Append Docker image info to the release notes
      - name: Update release notes with Docker instructions
        if: github.event_name == 'release'
        uses: actions/github-script@v7
        env:
          IMAGE_BASE: alloverse/alloplace3
          IMAGE_DIGEST: ${{ steps.push.outputs.digest }}
        with:
          script: |
            const rel = context.payload.release;
            const tag = rel.tag_name;
            const image = `${process.env.IMAGE_BASE}:${tag}`;
            const snippet = [
              '---',
              '### Docker image',
              '',
              `**Image:** \`${image}\``,
              '',
              '```bash',
              `docker pull ${image}`,
              `docker run --rm -it -p 9080:9080 ${image}
              '```',
              '',
              'Multi-arch: `linux/amd64, linux/arm64`.',
              process.env.IMAGE_DIGEST ? `Digest: \`${process.env.IMAGE_DIGEST}\`.` : '',
              ''
            ].join('\n');
            const body = (rel.body || '') + '\n\n' + snippet;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: rel.id,
              body
            });